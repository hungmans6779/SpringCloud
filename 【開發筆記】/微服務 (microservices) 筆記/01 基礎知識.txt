★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★
「微服務」microservices

 各自獨立的處理程序中執行，服務之間透過以 HTTP 為基礎 的 RESTful API 進行通訊協作。
 每個服務都維護本身的「資料儲存」、「業務開發」、「自動化測試專案」、「獨立部署機制」。

★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★
【如何實施 微服務】

1.《運行維護的新挑戰》：
   運行維護人員具備一定的開發能力來編排運行維護過程並讓它們能自動執行起來。

2.《介面的一致性》：
   需要完整的介面和版本管理，或是嚴格地遵循開閉原則。
   
3.《分散式的複雜性》：
   分散式環境的問題都將微服務架構系統設計時需要考慮的重要因素。
   例如：網路延遲、分散式交易、非同步訊息等 ...。
   
★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★   
提煉【微服務 microservice 架構】的九大特性 :
  
  參考網址：http://kaelzhang81.github.io/2017/09/14/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B9%9D%E5%A4%A7%E7%89%B9%E6%80%A7/
  
  01.  服務「元件化」
       元件，是一個可以獨立更換和升級的單元。
       在微服務架構中，需要我們對服務進行〔元件化〕分解。
       服務,是一種處理程序外的元件，它透過 HTTP 等通訊協定進行協作，而非像傳統元件那樣以嵌入的方式協作工作。
       每一個服務都可獨立開發、部署。
       原因：
       　　　(1) 服務可獨立部署、發佈
             (2) 服務接個更加明顯 (explicit)
               
  
  02.  按「業務」組織團隊
       在實施微服務架構時，需要採用不同的團隊分割方法。
       由於每一個微服務都是針特定業務的寬堆疊或是全端實現，既要負責資料的持久化儲存，又要負責使用者的介面定義等各種跨專業領域的職能。
       因此，面對大型專案時，對於微服務團隊的拆分更加建議按業務線的方式進行拆分，
       一方面可以有效減少服務內部修改所產生的內耗，另一方面，團隊邊界可以變得更為清晰。
       原因：
            (1) 端到端的業務服務 (全線、自治)
            (2) 有效降低變更成本
            (3) 團隊邊界更清晰。       


  03. 做「產品」的態度
      每個小團隊都應該以做產品的方式，對其產品的整個生命週期負責。
      而非以專案的模式，以完成開發與發佈並將成果交接給維護者為最後目標。
      ※ 以做『產品』的態度來對待每一個微服務，持續關注服務的運作情況，並不斷分析以幫助使用者來改善業務功能。


  04. 「智慧端點」與「啞管線」
       微服務架構中，由於服務不在一個處理程序中，元件間的通訊模式發生了改變，
       若僅將原本在處理程序內的方法呼叫改成 RPC 方式的呼叫，會導致微服務之間產生煩瑣的通訊，使得系統表現更為糟糕。      
       原因：
             (1) 像經典 Unix 的過濾器 (filter) 那樣來工作。
             (2) 輕量級的通信方式更易整合
             (3) 與 ESB 的中心化和啞服務形成對比。
       說明：   
       (1) 使用 HTTP 的 RESTful API 或 輕量級的訊息發送協定，實現資訊傳遞與服務呼叫的觸發。
       (2) 透過輕量級訊息匯流排上傳遞訊息，類似 RabbitMQ 等一些提供可靠性非同步交換的中介軟體。
        
   
  05.  去「中心化治理」
       實施微服務架時，透過採用輕化級的契約定義介面，使得我們對於服務本身的實際技術平台不再是那麼敏感，
       這樣整個微服務架構系統中的各個元作效能針對其不同的業務特點而選擇不同的技術平台。
  
    
  06.  去「中心化管理資料」
       在微服務架構中，強調在各服務之間進行『無交易』的呼叫，而對於資料一致性，只要求資料在最後的處理狀態是一致即可；
       若在過程中發現錯誤，透過補償機制來進行處理，使得錯誤資料能夠達到最後的一致性。
  
  
  07. 「基礎設施自動化」
       一開始就須建置起『持續發佈』平台來支撐整個實施過程，該平台需要兩大內容，缺一不可。
       (1) 自動化測試：獲得對正在執行中的軟體信心。
       (2) 自動化部署：解放煩瑣枯燥的重複操作以及對多環境的設定管理。
  
    
  08. 「容錯設計」 
       在微服務架構中，快速檢測出故障源並盡可能地自動恢復服務是必須被設計和考慮的。
       一般來說，我們都希望在每個服務中實現監控和記錄檔記錄的元件，
       例如：服務狀態，斷路器狀態、傳輸量、網路延遲等關鍵資料的儀表板等。
       原因：
       　　　(1) 服務數量多，依賴關係複雜
             (2) 故障定位困難
             (3) 微服務存在 『雪崩效應』、
             　　『雪崩效應』：如果在 A 服務中的鏈路上某個或幾個被調用的子服務不可用或是延遲較高，
             　　　　　　　　　則會導致調用 A 服務的請求被堵住，堵住的請求會消耗佔用掉系統的線程、IO 等資源，
             　　　　　　　　　當該請求越來越多，佔用的計算機資源越來越多時，會導致系統瓶頸出現，
             　　　　　　　　　造成其他的請求同樣不可用，最後導致業務系統崩潰。
       方式：
       　　　(1) 故障檢測
             (2) 自動恢復
  
  
  09. 「演進式設計」
       將一些經常變動或是有一定時間效應的內容進行微服務處理，並逐漸將原來在單體系統中多變的模組逐步拆分出來，
       而穩定不太變化的模組就形成一個核心微服務存在於整個架構之中。
                            
★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★
【Spring Cloud】簡介

  Spring Cloud 是一個以 Spring Boot 實現為基礎的微服務架構開發工具。
  它為微服務架構中有關下列，提供了一種簡單的開發方式。
  (01) 設定管理
  (02) 服務治理
  (03) 斷路器
  (04) 智慧路由
  (05) 微代理
  (06) 控制匯流排
  (07) 全域鎖
  (08) 決策競選
  (09) 分散式階段
  (10) 叢集狀態管理
 
★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★
